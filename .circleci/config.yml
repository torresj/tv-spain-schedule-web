# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/node:16.10
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Setup docker
      - setup_remote_docker:
          version: 19.03.13
      # Create revision variable
      - run:
          name: Generate revision
          command: |
            echo 'export REVISION="${CIRCLE_BUILD_NUM}-$(echo -n $CIRCLE_SHA1 | tail -c 8)"' >> $BASH_ENV
            source $BASH_ENV
      # Create mayor version variable
      - run:
          name: Generate mayor version
          command: |
            export APP_VERSION=$(grep '\"version\": \"' package.json | sed 's/[^0-9]*//g')
            echo 'export MAYOR_VERSION="${APP_VERSION}"' >> $BASH_ENV
            source $BASH_ENV
      # Prepare helm chart version
      - run:
          name: Set helm chart version
          command: sed -i "s/@version@/$MAYOR_VERSION$REVISION/g" helm/tv-spain-schedule-web/Chart.yaml && cat helm/tv-spain-schedule-web/Chart.yaml
      # Prepare kubeconfig
      - run:
          name: Prepare kubeconfig file
          command: sed -i -e "s/@certificate-authority-data@/$CERTIFICATE_AUTHORITY_DATA/g" -e "s,@cluster@,$CLUSTER,g" -e "s/@kubernetes-user@/$KUBERNETES_USER/g" -e "s/@client-certificate-data@/$CLIENT_CERTIFICATE_DATA/g" -e "s/@client-key-data@/$CLIENT_KEY_DATA/g" helm/kubeconfig && cat helm/kubeconfig
      # Login docker registry
      - run:
          name: Login docker registry
          command: docker login $REGISTRIY_URL -u $REGISTRY_USER -p $REGISTRY_PASSWORD
      # Build
      - run:
          name: Build
          command: yarn
      # Generate docker image
      - run:
          name: Generate docker image
          command: docker build -t $REGISTRIY_URL/tv-spain-schedule-web:$MAYOR_VERSION$REVISION .
      # Push docker image
      - run:
          name: Push docker image
          command: docker push $REGISTRIY_URL/tv-spain-schedule-web:$MAYOR_VERSION$REVISION
      # Persist helm folder
      - persist_to_workspace:
          root: .
          paths:
            - helm

  # Deploy in kubernetes with helm
  deploy:
    # Using docker image with kubectl and helm
    docker:
      - image: torresjb/helmv3:latest

    steps:
      - attach_workspace:
          at: .
      # Add chartmuseum repo
      - run:
          name: Add chartmuseum repo
          command: helm repo add torresj https://charts.torresj.com --username $CHARTS_USER --password $CHARTS_PASSWORD && helm repo update
      # Generate and push chart
      - run:
          name: Push chart
          command: helm cm-push helm/tv-spain-schedule-web torresj && helm repo update
      # Install chart
      - run:
          name: Install chart
          command: helm upgrade tv-spain-schedule-web helm/tv-spain-schedule-web -n tvschedule --install --kubeconfig=helm/kubeconfig
      # Check deployment
      - run:
          name: Check deployment
          command: kubectl rollout status deployment tv-spain-schedule-web -n tvschedule --kubeconfig=helm/kubeconfig

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build_and_deploy: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build:
          context:
            - "Kubernetes cluster"
      - deploy:
          context:
            - "Kubernetes cluster"
          requires:
            - build
